{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Wayne Graham&#39;s Musings",
	"language": "en",
	"home_page_url": "https://waynegraham.github.io/",
	"feed_url": "https://waynegraham.github.io/feed/feed.json",
	"description": "I write about my experiences...randomly",
	"author": {
		"name": "Wayne Graham",
		"url": "https://waynegraham.github.io/about-me/"
	},
	"items": [
		{
			"id": "https://waynegraham.github.io/posts/2015-02-06-svn-to-git/",
			"url": "https://waynegraham.github.io/posts/2015-02-06-svn-to-git/",
			"title": "Migrating from Subversion to git",
			"content_html": "<p>Scholars' Lab not only writes <a href=\"https://github.com/scholarslab\">software</a> and mentors graduate students, it also manages a lot of software projects that have been going on at the University of Virginia since the 90s. One of the things you need to do every so often is shift platforms that you use in your infrastructure.</p>\n<p>When I arrived at the Scholars' Lab six years ago, one of the big\nprojects that was underway was dealing with all of the text that had\naccumulated various servers. To help get a handle on the projects, lots\nof people started using source control management software to start\nkeeping track of changes (and recover more quickly if files were\naccidently deleted). At the time, Subversion was the best option, so a\nbig push was made to convert all of these projects in to Subversion\nrepositories.</p>\n<p>While Subversion is really great in a lot of ways, it did have some\nissues that often made working with the tool quite painful. It was even\nworse for people who did not use the tool every day and could often get\nin to situations where a project would languish for months for an\nobscure issue with a SVN client or server.</p>\n<p>As software development shifted to using <code>git</code> (which I attribute mainly\nto the rise in the utility of GitHub), Scholars' Lab staff pretty much\nstarted using <code>git</code> exclusively.</p>\n<h2 id=\"migrating-the-repo\" tabindex=\"-1\">Migrating the Repo <a class=\"header-anchor\" href=\"https://waynegraham.github.io/posts/2015-02-06-svn-to-git/\">#</a></h2>\n<p>The first step in this migration was to grab a list of authors who had\nworked on the project since <code>git</code> and <code>svn</code> have different methods of\nmapping author attribution.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> path/to/svn_repo\n$ svn log <span class=\"token parameter variable\">-q</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token parameter variable\">-F</span> <span class=\"token string\">'|'</span> <span class=\"token string\">'/^r/ {sub(\"^ \", \"\", $2); sub(\" $\", \"\", $2); print $2\" = \"$2\" &lt;\"$2\">\"}'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-u</span> <span class=\"token operator\">></span> authors.txt</code></pre>\n<p>Next, you need to edit the <code>authors.txt</code> file a bit to expand the username mappings. In the file, you'll see <code>username = username &lt;username&gt;</code>. You just need to use the person's real name and email address.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">wsg4w <span class=\"token operator\">=</span> Wayne Graham <span class=\"token operator\">&lt;</span>wsg4w@uva.edu<span class=\"token operator\">></span></code></pre>\n<h2 id=\"clone-the-repo\" tabindex=\"-1\">Clone the Repo <a class=\"header-anchor\" href=\"https://waynegraham.github.io/posts/2015-02-06-svn-to-git/\">#</a></h2>\n<p>This is where things got <em>interesting</em>. The <code>git svn</code> tool is generally\nwhere I go to do this thing, but the repository I'm dealing with is\nreally big, and has a non-standard layout. The first thing I tried was\nthis:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> ~/temp\n$ <span class=\"token builtin class-name\">cd</span> path/to/svn_repo\n$ <span class=\"token function\">git</span> svn clone https://subversion.lib.virginia.edu/repos/salem <span class=\"token parameter variable\">--username</span> wsg4w --no-metadata <span class=\"token parameter variable\">-A</span> authors.txt <span class=\"token parameter variable\">--stdlayout</span> ~/temp</code></pre>\n<p>However, this failed after the server threw a 500 error. Ok, so rethink\nthis. I can create a local sync of the SVN repo which should allow me to\nrecover from a server failure.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /tmp/salem\n$ svnadmin create /tmp/salem/\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"exit 0;\"</span> <span class=\"token operator\">></span> /tmp/test-svn/hooks/pre-revprop-change\n$ <span class=\"token function\">chmod</span> +x /tmp/salem/hooks/pre-revprop-change\n$ svnsync init file:///tmp/salem https://subversion.lib.virginia.edu/repos/salem\n$ svnsync <span class=\"token function\">sync</span> file:///tmp/salem</code></pre>\n",
			"date_published": "2015-02-06T00:00:00Z"
		}
		
	]
}